version: 2.1

executors:
    director:
        # set up the docker environment
        docker:
            - image: circleci/python:latest # Use the latest python docker.

jobs:
    build:
        executor: director
        
        steps:
            # Checkout source files:
            - checkout
            
            # create cache for python dependencies:
            # - restore_cache:
                # key: v4_dependencies
                
            # Instalation of the required packages:
            - run:
                name: Install Python dependencies
                command: |
                    pip install matplotlib --user
                    pip install jupyter --user
                    pip install nbconvert --user
            # - save_cache:
                # key: v4_dependencies
                # paths:
                    # - "venv"
                    # - "/usr/local/bin"
                    # - "/usr/local/lib/python3.6/site-packages"
                    
            # Export notebooks to script:
            
            # Create file to serve as workspace:
            # - run: mkdir -p workspace
            
            # Export the .ipynb files to .py:
            - run:
                name: Notebook to scripts
                command: jupyter nbconvert *.ipynb --to script
                
            # Packaging within the docker:
            
            # Create necessary folder structure:
            - run:
                name: Create folders and move files
                command: |
                    mkdir refresher_cs
                    mv solution.py refresher_cs/solution.py
                    mv Objects.py refresher_cs/objects.py
                    mkdir refresher_cs/tests
                    mv test.py refresher_cs/tests/test_solution.py
                    mv objectsTest.py refresher_cs/tests/test_objects.py
            
            # copy to workspace:
            - persist_to_workspace:
                root: .
                paths:
                    - refresher_cs/solution.py
                    - refresher_cs/tests/test_solution.py
                    - refresher_cs/objects.py
                    - refresher_cs/tests/test_objects.py
                    
                    
            # Packaging using circleci's artifacts:
            
            - store_artifacts:
                path: refresher_cs/solution.py
                destination: refresher_cs/solutions.py
          
            - store_artifacts:
                path: refresher_cs/tests/test_solution.py
                destination: refresher_cs/tests/test_solution.py
                
            - store_artifacts:
                path: refresher_cs/objects.py
                destination: refresher_cs/oop_solutions.py
                
            - store_artifacts:
                path: refresher_cs/tests/test_objects.py
                destination: refresher_cs/tests/test_oop_solutions.py

    auto-test:
        # Define executor:
        executor: director
        
        steps:
            # load cache:
            # - restore_cache:
                # key: v4_dependencies   
                
            - attach_workspace:
                at: /home/circleci/project
                
            - run:
                name: install dependencies
                command: |
                    pip install matplotlib --user
                    pip install numpy --user
                    
            - run:
                name: create necessary directories:
                command: |
                    mkdir test-results/solution
                    mkdir test-results/oop_solution
                    
            - run:
                name: Unit_testing
                command: python refresher_cs/solution.py --unittest > test-results/solution/results.xml
            - run:
                name: Object oriented unit_testing
                command: python refresher_cs/objects.py --unittest > test-results/oop_solution/results.xml
                
            - store_test_results:
                path: test-results
                
    auto-radon:
        # Define executor:
        executor: director

        steps:
            # load cache:
            # - restore_cache:
                # key: v4_dependencies 
                
            - attach_workspace:
                at: /home/circleci/project
            - run:
                name: install dependencies
                command: |
                    pip install radon --user
                    
            # Cyclomatic complexity
            - run:
                name: Cyclomatic complexity
                command: radon cc python refresher_cs/solution.py > cc_solution.txt
            - run:
                name: Cyclomatic complexity OOP
                command: radon cc refresher_cs/objects.py > cc_oop_solution.txt
            # Halstead complexity:
            - run:
                name: Halstead complexity
                command: radon hal python refresher_cs/solution.py > hal_solution.txt
            - run:
                name: Halstead complexity OOP
                command: radon hal refresher_cs/objects.py > hal_oop_solution.txt

            # Save the complexity into artifacts:
            - store_artifacts:
                path: cc_solution.txt
                destination: radon/cc_solution.txt
                
            - store_artifacts:
                path: cc_oop_solution.txt
                destination: radon/cc_oop_solution.txt
                
            - store_artifacts:
                path: hal_solution.txt
                destination: radon/hal_solution.txt
                
            - store_artifacts:
                path: hal_oop_solution.txt
                destination: radon/hal_oop_solution.txt

workflows:
  version: 2
  my_workflow:
    jobs:
        - build
        # - auto-export:
            # requires:
                # - build
        - auto-test:
            requires:
                - build
                # - auto-export
        - auto-radon:
            requires:
                - build
                # - auto-export